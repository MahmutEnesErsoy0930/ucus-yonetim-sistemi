import streamlit as st
import re
from datetime import datetime, date
from flight_crud.flight_manager import calculate_duration_between, create_flight, list_flights_by_date, list_all_flights, delete_flight
from booking.checkin import check_in
from booking.pdf_ticket import generate_pdf_ticket
from booking.passenger_manager import add_passenger, list_passengers, delete_passenger
from flight_crud.database import create_tables
from utils.validation import is_valid_name, is_valid_phone, is_valid_date

st.set_page_config(page_title="UÃ§uÅŸ YÃ¶netim Sistemi")
st.title("ğŸ›« UÃ§uÅŸ YÃ¶netim Sistemi")

create_tables()



menu =  st.sidebar.selectbox("Ä°ÅŸlem SeÃ§in", [
    "UÃ§uÅŸ OluÅŸtur",
    "TÃ¼m UÃ§uÅŸlarÄ± Listele",
    "UÃ§uÅŸ Tarihine GÃ¶re Listele",
    "Yolcu Ekle",
    "YolcularÄ± Listele",
    "Yolcu Sil",
    "Check-in Yap",
    "PDF Bilet OluÅŸtur",
    "UÃ§uÅŸ Sil"
])



if menu == "UÃ§uÅŸ OluÅŸtur":
    flight_no = st.text_input("UÃ§uÅŸ NumarasÄ±")
    origin = st.text_input("KalkÄ±ÅŸ NoktasÄ±")
    destination = st.text_input("VarÄ±ÅŸ NoktasÄ±")
    date_input = st.text_input("Tarih (GG.AA.YYYY)", placeholder="Ã–rn: 25.05.2025")

    flight_type = None
    departure_time = None
    arrival_time = None
    transfer_point = None
    first_departure_time = None
    first_arrival_time = None
    second_departure_time = None
    second_arrival_time = None

    if date_input:
        flight_type = st.radio("UÃ§uÅŸ Tipi SeÃ§iniz:", ("Direk UÃ§uÅŸ", "AktarmalÄ± UÃ§uÅŸ"))

        if flight_type == "Direk UÃ§uÅŸ":
            departure_time = st.text_input("KalkÄ±ÅŸ Saati (SS:DD)", placeholder="Ã–rn: 14:30")
            arrival_time = st.text_input("VarÄ±ÅŸ Saati (SS:DD)", placeholder="Ã–rn: 16:45")
            if departure_time and arrival_time:
                try:
                    duration_str = calculate_flight_duration(departure_time, arrival_time)
                    st.write(f"UÃ§uÅŸ SÃ¼resi: {duration_str}")
                except Exception:
                    st.error("SÃ¼re hesaplanamadÄ±!")
        else:
            transfer_point = st.text_input("Aktarma NoktasÄ±")
            st.write("1. UÃ§uÅŸ iÃ§in saatleri giriniz:")
            first_departure_time = st.text_input("1. UÃ§uÅŸ KalkÄ±ÅŸ Saati (SS:DD)")
            first_arrival_time = st.text_input("1. UÃ§uÅŸ VarÄ±ÅŸ Saati (SS:DD)")
            st.write("2. UÃ§uÅŸ iÃ§in saatleri giriniz:")
            second_departure_time = st.text_input("2. UÃ§uÅŸ KalkÄ±ÅŸ Saati (SS:DD)")
            second_arrival_time = st.text_input("2. UÃ§uÅŸ VarÄ±ÅŸ Saati (SS:DD)")

            # AktarmalÄ± uÃ§uÅŸta toplam sÃ¼reyi hesaplayÄ±p gÃ¶sterelim
            if all([first_departure_time, first_arrival_time, second_departure_time, second_arrival_time]):
                try:
                    fmt = "%H:%M"
                    from datetime import datetime, timedelta

                    def get_minutes(t1, t2):
                        dt1 = datetime.strptime(t1, fmt)
                        dt2 = datetime.strptime(t2, fmt)
                        if dt2 < dt1:
                            dt2 += timedelta(days=1)
                        delta = dt2 - dt1
                        return delta.seconds // 60

                    first_flight_min = get_minutes(first_departure_time, first_arrival_time)
                    second_flight_min = get_minutes(second_departure_time, second_arrival_time)
                    total_min = first_flight_min + second_flight_min

                    total_hours = total_min // 60
                    total_minutes = total_min % 60
                    st.write(f"Toplam UÃ§uÅŸ SÃ¼resi: {total_hours} saat {total_minutes} dakika")
                    duration = f"{total_hours} saat {total_minutes} dakika"
                except Exception:
                    st.error("Toplam uÃ§uÅŸ sÃ¼resi hesaplanamadÄ±!")
                    duration = None
            else:
                duration = None

    plane_capacity_str = st.text_input("UÃ§ak Kapasitesi")
    economy_seats_str = st.text_input("Ekonomi Koltuk SayÄ±sÄ±")
    business_seats_str = st.text_input("Business Koltuk SayÄ±sÄ±")

    if st.button("UÃ§uÅŸu OluÅŸtur"):
        # Alan kontrolÃ¼
        if not flight_no or not origin or not destination or not date_input or not plane_capacity_str or not economy_seats_str or not business_seats_str:
            st.error("LÃ¼tfen tÃ¼m alanlarÄ± doldurun!")
            st.stop()
        if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", date_input):
            st.error("Tarih formatÄ± yanlÄ±ÅŸ! LÃ¼tfen GG.AA.YYYY ÅŸeklinde girin.")
            st.stop()
        if not flight_type:
            st.error("LÃ¼tfen uÃ§uÅŸ tipi seÃ§in!")
            st.stop()

        time_pattern = r"^(?:[01]\d|2[0-3]):[0-5]\d$"
        if flight_type == "Direk UÃ§uÅŸ":
            if not departure_time or not arrival_time:
                st.error("LÃ¼tfen kalkÄ±ÅŸ ve varÄ±ÅŸ saatlerini girin!")
                st.stop()
            if not re.match(time_pattern, departure_time):
                st.error("KalkÄ±ÅŸ saati formatÄ± yanlÄ±ÅŸ! LÃ¼tfen SS:DD ÅŸeklinde girin.")
                st.stop()
            if not re.match(time_pattern, arrival_time):
                st.error("VarÄ±ÅŸ saati formatÄ± yanlÄ±ÅŸ! LÃ¼tfen SS:DD ÅŸeklinde girin.")
                st.stop()
            # duration zaten yukarÄ±da hesaplandÄ±
        else:
            if not transfer_point:
                st.error("LÃ¼tfen aktarma noktasÄ± girin!")
                st.stop()
            if not first_departure_time or not first_arrival_time or not second_departure_time or not second_arrival_time:
                st.error("LÃ¼tfen tÃ¼m aktarmalÄ± uÃ§uÅŸ saatlerini girin!")
                st.stop()
            for t in [first_departure_time, first_arrival_time, second_departure_time, second_arrival_time]:
                if not re.match(time_pattern, t):
                    st.error(f"'{t}' saat formatÄ± yanlÄ±ÅŸ! LÃ¼tfen SS:DD ÅŸeklinde girin.")
                    st.stop()

        try:
            plane_capacity = int(plane_capacity_str)
            economy_seats = int(economy_seats_str)
            business_seats = int(business_seats_str)

            if plane_capacity < 1:
                st.error("UÃ§ak kapasitesi 1 veya daha fazla olmalÄ±dÄ±r!")
                st.stop()
            if economy_seats < 0 or business_seats < 0:
                st.error("Koltuk sayÄ±larÄ± negatif olamaz!")
                st.stop()
            if economy_seats == 0 and business_seats == 0:
                st.error("En az bir koltuk sayÄ±sÄ± 1 veya daha fazla olmalÄ±dÄ±r!")
                st.stop()
            if economy_seats > plane_capacity:
                st.error("Ekonomi koltuk sayÄ±sÄ±, uÃ§ak kapasitesinden fazla olamaz!")
                st.stop()
            if business_seats > plane_capacity:
                st.error("Business koltuk sayÄ±sÄ±, uÃ§ak kapasitesinden fazla olamaz!")
                st.stop()
            if economy_seats + business_seats > plane_capacity:
                st.error("Toplam koltuk sayÄ±sÄ±, uÃ§ak kapasitesini aÅŸamaz!")
                st.stop()

            date_obj = datetime.strptime(date_input, "%d.%m.%Y").date()
            today = date.today()
            if date_obj < today:
                st.error("GeÃ§miÅŸ tarih girelemez!")
                st.stop()
            formatted_date = date_obj.strftime("%Y-%m-%d")

            success, message = create_flight(
                flight_no, origin, destination, formatted_date,
                plane_capacity, economy_seats, business_seats,
                departure_time, arrival_time, duration,
                flight_type, transfer_point,
                first_departure_time, first_arrival_time,
                second_departure_time, second_arrival_time
            )
            if success:
                st.success(message)
            else:
                st.error(message)

        except ValueError:
            st.error("Kapasite ve koltuk sayÄ±larÄ± pozitif tam sayÄ± olmalÄ±dÄ±r!")
        except Exception as e:
            st.error(f"Hata: {e}")

elif menu == "TÃ¼m UÃ§uÅŸlarÄ± Listele":
    flights_df = list_all_flights()
    if not flights_df.empty:
        st.table(flights_df)
    else:
        st.warning("VeritabanÄ±nda hiÃ§ uÃ§uÅŸ yok.")




elif menu == "UÃ§uÅŸ Tarihine GÃ¶re Listele":
    date = st.text_input("Tarih (YYYY-MM-DD)")
    if st.button("Listele"):
        if is_valid_date(date):
            flights = list_flights_by_date(date)
            st.table(flights)
        else:
            st.error("GeÃ§ersiz tarih")

elif menu == "Yolcu Ekle":
    tckn = st.text_input("TCKN")
    name = st.text_input("Ad Soyad")
    phone = st.text_input("Telefon")
    flight_no = st.text_input("UÃ§uÅŸ NumarasÄ±")
    if st.button("Yolcu Ekle"):
        if is_valid_name(name) and is_valid_phone(phone):
            add_passenger(tckn, name, phone, flight_no)
            st.success("Yolcu eklendi!")
        else:
            st.error("GeÃ§ersiz isim veya telefon")

elif menu == "YolcularÄ± Listele":
    passengers = list_passengers()
    st.table(passengers)

elif menu == "Yolcu Sil":
    tckn = st.text_input("Silinecek Yolcunun TCKN'si")
    if st.button("Yolcuyu Sil"):
        delete_passenger(tckn)
        st.success("Yolcu silindi")

elif menu == "Check-in Yap":
    tckn = st.text_input("TCKN")
    if st.button("Check-in"):
        check_in(tckn)
        st.success("Check-in tamamlandÄ±")

elif menu == "PDF Bilet OluÅŸtur":
    tckn = st.text_input("TCKN")
    if st.button("Bileti OluÅŸtur"):
        generate_pdf_ticket(tckn)
        st.success("PDF bilet oluÅŸturuldu")

elif menu == "UÃ§uÅŸ Sil":
    flight_no = st.text_input("Silinecek UÃ§uÅŸ NumarasÄ±")
    if st.button("UÃ§uÅŸu Sil"):
        delete_flight(flight_no)
        st.success("UÃ§uÅŸ silindi")